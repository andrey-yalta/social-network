{"ast":null,"code":"import _regeneratorRuntime from \"/Users/andrejzaharcenko/Desktop/test/react-way-of-samurai/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/andrejzaharcenko/Desktop/test/react-way-of-samurai/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/Users/andrejzaharcenko/Desktop/test/react-way-of-samurai/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { authAPI, securityAPI } from \"../api/api\";\nimport { stopSubmit } from \"redux-form\";\nvar SET_USER_DATA = 'SET_USER_DATA';\nvar GET_CAPTCHA_URL_SUCCESS = \"GET_CAPTCHA_URL_SUCCESS\";\nvar initialState = {\n  userId: null,\n  email: null,\n  login: null,\n  isAuth: false,\n  captchaUrl: null\n};\n\nvar authReducer = function authReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SET_USER_DATA:\n    case GET_CAPTCHA_URL_SUCCESS:\n      return _objectSpread({}, state, action.payload);\n\n    default:\n      return state;\n  }\n};\n\nexport var setAuthUserData = function setAuthUserData(userId, email, login, isAuth) {\n  return {\n    type: SET_USER_DATA,\n    payload: {\n      userId: userId,\n      email: email,\n      login: login,\n      isAuth: isAuth\n    }\n  };\n};\nexport var getCaptchaUrlSuccess = function getCaptchaUrlSuccess(captchaUrl) {\n  return {\n    type: GET_CAPTCHA_URL_SUCCESS,\n    payload: {\n      captchaUrl: captchaUrl\n    }\n  };\n};\nexport var getAuthUserData = function getAuthUserData() {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var response, _response$data$data, id, _login, email;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return authAPI.me();\n\n            case 2:\n              response = _context.sent;\n\n              if (response.data.resultCode === 0) {\n                _response$data$data = response.data.data, id = _response$data$data.id, _login = _response$data$data.login, email = _response$data$data.email;\n                dispatch(setAuthUserData(id, email, _login, true));\n              }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport var login = function login(email, password, rememberMe, captcha) {\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch) {\n      var response, message;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return authAPI.login(email, password, rememberMe);\n\n            case 2:\n              response = _context2.sent;\n\n              if (response.data.resultCode === 0) {\n                //success, get auth data\n                dispatch(getAuthUserData());\n              } else {\n                if (response.data.resultCode === 10) {\n                  dispatch(getCaptchaUrl());\n                }\n\n                message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\n                dispatch(stopSubmit(\"login\", {\n                  _error: message\n                }));\n              }\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};\nexport var getCaptchaUrl = function getCaptchaUrl() {\n  return /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch) {\n      var response, captchaUrl;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return securityAPI.getCaptchaUrl();\n\n            case 2:\n              response = _context3.sent;\n              captchaUrl = response.data.url;\n              dispatch(getCaptchaUrlSuccess(captchaUrl));\n\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function (_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n};\nexport var logout = function logout() {\n  return /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(dispatch) {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return authAPI.logout();\n\n            case 2:\n              response = _context4.sent;\n\n              if (response.data.resultCode === 0) {\n                dispatch(setAuthUserData(null, null, null, false));\n              }\n\n            case 4:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function (_x4) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n};\nexport default authReducer;","map":{"version":3,"sources":["/Users/andrejzaharcenko/Desktop/test/react-way-of-samurai/src/redux/auth-reducer.js"],"names":["authAPI","securityAPI","stopSubmit","SET_USER_DATA","GET_CAPTCHA_URL_SUCCESS","initialState","userId","email","login","isAuth","captchaUrl","authReducer","state","action","type","payload","setAuthUserData","getCaptchaUrlSuccess","getAuthUserData","dispatch","me","response","data","resultCode","id","password","rememberMe","captcha","getCaptchaUrl","message","messages","length","_error","url","logout"],"mappings":"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","sourcesContent":["import {authAPI,securityAPI} from \"../api/api\";\n\nimport {stopSubmit} from \"redux-form\";\n\nconst SET_USER_DATA = 'SET_USER_DATA';\nconst GET_CAPTCHA_URL_SUCCESS = \"GET_CAPTCHA_URL_SUCCESS\";\n\nlet initialState = {\n    userId: null,\n    email: null,\n    login: null,\n    isAuth: false,\n    captchaUrl: null,\n};\n\nconst authReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_USER_DATA:\n        case GET_CAPTCHA_URL_SUCCESS:\n            return {\n                ...state,\n                ...action.payload\n            }\n        default:\n            return state;\n    }\n}\n\nexport const setAuthUserData = (userId, email, login, isAuth) => ({type: SET_USER_DATA, payload:\n        {userId, email, login, isAuth}  });\n\nexport const getCaptchaUrlSuccess = (captchaUrl) => ({type: GET_CAPTCHA_URL_SUCCESS, payload:\n        {captchaUrl}  });\n\nexport const getAuthUserData = () => async (dispatch) => {\n      let response = await authAPI.me()\n            if (response.data.resultCode === 0) {\n                let {id, login, email} = response.data.data;\n                dispatch(setAuthUserData(id, email, login, true));\n            }\n}\n\nexport const login = (email, password, rememberMe, captcha) => async(dispatch) => {\n     let response = await authAPI.login(email, password, rememberMe);\n            if (response.data.resultCode === 0) {\n                //success, get auth data\n                dispatch(getAuthUserData())\n            }\n            else{\n                if(response.data.resultCode === 10){\n                    dispatch(getCaptchaUrl());\n                }\n                let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\n                dispatch(stopSubmit(\"login\", {_error: message}));\n            }\n}\n\nexport const getCaptchaUrl = () => async(dispatch) => {\n    const response = await securityAPI.getCaptchaUrl();\n    const captchaUrl = response.data.url;\n    dispatch(getCaptchaUrlSuccess(captchaUrl))\n}\n\nexport const logout = () => async(dispatch) => {\n    let response = await authAPI.logout()\n            if (response.data.resultCode === 0) {\n                dispatch(setAuthUserData(null, null, null, false));\n            }\n}\nexport default authReducer;"]},"metadata":{},"sourceType":"module"}